{"remainingRequest":"/Users/robert/project/vue/通用vue3/project/node_modules/babel-loader/lib/index.js!/Users/robert/project/vue/通用vue3/project/node_modules/eslint-loader/index.js??ref--13-0!/Users/robert/project/vue/通用vue3/project/src/utils/index.js","dependencies":[{"path":"/Users/robert/project/vue/通用vue3/project/src/utils/index.js","mtime":1557407240651},{"path":"/Users/robert/project/vue/通用vue3/project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/robert/project/vue/通用vue3/project/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/robert/project/vue/通用vue3/project/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport store from '../store'; // 权限校验\n// export function permit(e) {\n//   return store.getters.roles.includes(e)\n// }\n// 数组转树 data:数据  parentId id 做好对应\n\nvar arrayToTree = function arrayToTree(data, parentId, id) {\n  data.sort(function (a, b) {\n    return a[parentId] - b[id];\n  }); // 存储对象\n\n  var midObj = {}; // 从后向前遍历\n\n  for (var i = data.length - 1; i >= 0; i--) {\n    var item = data[i]; // 当前的父id\n\n    var nowPid = item[parentId]; // 当前id\n\n    var nowId = item[id]; // 建立当前节点的父节点的children数组\n    // 如果父节点已经存在就往原数组中添加\n\n    if (midObj[nowPid]) {\n      midObj[nowPid].push(item);\n    } else {\n      midObj[nowPid] = [];\n      midObj[nowPid].push(item);\n    } // 将children放入合适的位置\n\n\n    if (midObj[nowId]) {\n      item.children = midObj[nowId];\n      delete midObj[nowId];\n    }\n  }\n\n  data.filter(function (list) {\n    return list[parentId] == 0;\n  });\n  return data;\n};\n\nexport { arrayToTree };",{"version":3,"sources":["/Users/robert/project/vue/通用vue3/project/src/utils/index.js"],"names":["store","arrayToTree","data","parentId","id","sort","a","b","midObj","i","length","item","nowPid","nowId","push","children","filter","list"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,UAAlB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAMC,QAAN,EAAeC,EAAf,EAAoB;AACtCF,EAAAA,IAAI,CAACG,IAAL,CAAU,UAACC,CAAD,EAAGC,CAAH,EAAO;AACb,WAAOD,CAAC,CAACH,QAAD,CAAD,GAAYI,CAAC,CAACH,EAAD,CAApB;AACH,GAFD,EADsC,CAItC;;AACA,MAAII,MAAM,GAAG,EAAb,CALsC,CAMtC;;AACA,OAAI,IAAIC,CAAC,GAAGP,IAAI,CAACQ,MAAL,GAAY,CAAxB,EAA2BD,CAAC,IAAE,CAA9B,EAAiCA,CAAC,EAAlC,EAAqC;AACjC,QAAIE,IAAI,GAAGT,IAAI,CAACO,CAAD,CAAf,CADiC,CAEjC;;AACA,QAAIG,MAAM,GAAGD,IAAI,CAACR,QAAD,CAAjB,CAHiC,CAIjC;;AACA,QAAIU,KAAK,GAAGF,IAAI,CAACP,EAAD,CAAhB,CALiC,CAOjC;AACA;;AACA,QAAGI,MAAM,CAACI,MAAD,CAAT,EAAkB;AACdJ,MAAAA,MAAM,CAACI,MAAD,CAAN,CAAeE,IAAf,CAAoBH,IAApB;AACH,KAFD,MAEM;AACFH,MAAAA,MAAM,CAACI,MAAD,CAAN,GAAiB,EAAjB;AACAJ,MAAAA,MAAM,CAACI,MAAD,CAAN,CAAeE,IAAf,CAAoBH,IAApB;AACH,KAdgC,CAgBjC;;;AACA,QAAGH,MAAM,CAACK,KAAD,CAAT,EAAiB;AACbF,MAAAA,IAAI,CAACI,QAAL,GAAgBP,MAAM,CAACK,KAAD,CAAtB;AACA,aAAOL,MAAM,CAACK,KAAD,CAAb;AACH;AACJ;;AACDX,EAAAA,IAAI,CAACc,MAAL,CAAY,UAACC,IAAD,EAAQ;AAChB,WAAOA,IAAI,CAACd,QAAD,CAAJ,IAAkB,CAAzB;AACH,GAFD;AAGA,SAAOD,IAAP;AACD,CAjCD;;AAmCA,SACED,WADF","sourcesContent":["import store from '../store'\n\n// 权限校验\n// export function permit(e) {\n//   return store.getters.roles.includes(e)\n// }\n// 数组转树 data:数据  parentId id 做好对应\nconst arrayToTree = (data,parentId,id)=>{\n  data.sort((a,b)=>{\n      return a[parentId]-b[id]\n  })\n  // 存储对象\n  let midObj = {}\n  // 从后向前遍历\n  for(let i = data.length-1; i>=0; i--){\n      let item = data[i]\n      // 当前的父id\n      let nowPid = item[parentId]\n      // 当前id\n      let nowId = item[id]\n\n      // 建立当前节点的父节点的children数组\n      // 如果父节点已经存在就往原数组中添加\n      if(midObj[nowPid]){\n          midObj[nowPid].push(item)\n      }else {\n          midObj[nowPid] = []\n          midObj[nowPid].push(item)\n      }\n\n      // 将children放入合适的位置\n      if(midObj[nowId]){\n          item.children = midObj[nowId]\n          delete midObj[nowId]\n      }\n  }\n  data.filter((list)=>{\n      return list[parentId] == 0\n  })\n  return data\n}\n\nexport {\n  arrayToTree\n}\n\n\n"]}]}