{"remainingRequest":"/Users/robert/project/vue/通用vue3/project/node_modules/babel-loader/lib/index.js!/Users/robert/project/vue/通用vue3/project/node_modules/eslint-loader/index.js??ref--13-0!/Users/robert/project/vue/通用vue3/project/src/permission.js","dependencies":[{"path":"/Users/robert/project/vue/通用vue3/project/src/permission.js","mtime":1557319821988},{"path":"/Users/robert/project/vue/通用vue3/project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/robert/project/vue/通用vue3/project/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/robert/project/vue/通用vue3/project/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/robert/project/vue/\\u901A\\u7528vue3/project/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport vue from 'vue';\nimport router from './router';\nimport store from './store';\nimport { getToken, removeToken } from './utils/auth';\nimport { getRouter } from './api/login';\nimport { addRouter } from './utils/addRouter';\nvar vm = new vue();\nvar whiteList = ['/login'];\nvar data = false; // 本次demo用变量凑合一下,项目里面应该放到vuex内\n\nrouter.beforeEach(function (to, from, next) {\n  if (getToken()) {\n    // 判断cookice是否存在 不存在即为未登录\n    if (to.path !== '/login') {\n      if (data) {\n        // 获取了动态路由 data一定true,就无需再次请求 直接放行\n        next();\n      } else {\n        // data为false,一定没有获取动态路由,就跳转到获取动态路由的方法\n        gotoRouter(to, next);\n      }\n    } else {\n      vm.$message.info('您已经登录');\n      next('/');\n    }\n  } else {\n    data = false;\n\n    if (whiteList.indexOf(to.path) !== -1) {\n      // 免登陆白名单 直接进入\n      next();\n    } else {\n      if (to.path !== '/login') {\n        // 重定向到登录页面 不能这么写 因为假如之前的角色是 管理员页面 后又登陆了非管理员 重定向的页面就可能不存在,就会导致404\n        // next(`/login?redirect=${to.path}`)\n        next('/login');\n      } else {\n        next();\n      }\n    }\n  }\n});\nrouter.afterEach(function () {});\n\nfunction gotoRouter(to, next) {\n  // todo 修改传参\n  getRouter(localStorage.getItem('SET_NAME')) // 获取动态路由的方法\n  .then(function (res) {\n    window.console.log('解析后端动态路由', res.data.data.router);\n    var asyncRouter = addRouter(res.data.data.router); // 进行递归解析\n    // 一定不能写在静态路由里面,否则会出现,访问动态路由404的情况.所以在这列添加\n\n    asyncRouter.push({\n      path: '*',\n      redirect: '/404',\n      hidden: true\n    });\n    console.log(asyncRouter);\n    return asyncRouter;\n  }).then(function (asyncRouter) {\n    router.addRoutes(asyncRouter); // vue-router提供的addRouter方法进行路由拼接\n\n    data = true; // 记录路由获取状态\n\n    store.dispatch('setRouterList', asyncRouter); // 存储到vuex\n\n    next(_objectSpread({}, to, {\n      replace: true\n    })); // hack方法 确保addRoutes已完成\n  }).catch(function (e) {\n    removeToken();\n  });\n}",{"version":3,"sources":["/Users/robert/project/vue/通用vue3/project/src/permission.js"],"names":["vue","router","store","getToken","removeToken","getRouter","addRouter","vm","whiteList","data","beforeEach","to","from","next","path","gotoRouter","$message","info","indexOf","afterEach","localStorage","getItem","then","res","window","console","log","asyncRouter","push","redirect","hidden","addRoutes","dispatch","replace","catch","e"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,cAAtC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,IAAIC,EAAE,GAAG,IAAIP,GAAJ,EAAT;AACA,IAAMQ,SAAS,GAAG,CAAC,QAAD,CAAlB;AACA,IAAIC,IAAI,GAAG,KAAX,C,CAAiB;;AACjBR,MAAM,CAACS,UAAP,CAAkB,UAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,EAAoB;AACpC,MAAIV,QAAQ,EAAZ,EAAgB;AACd;AACA,QAAIQ,EAAE,CAACG,IAAH,KAAY,QAAhB,EAA0B;AACxB,UAAIL,IAAJ,EAAU;AACR;AACAI,QAAAA,IAAI;AACL,OAHD,MAGO;AACL;AACAE,QAAAA,UAAU,CAACJ,EAAD,EAAKE,IAAL,CAAV;AACD;AACF,KARD,MAQO;AACLN,MAAAA,EAAE,CAACS,QAAH,CAAYC,IAAZ,CAAiB,OAAjB;AACAJ,MAAAA,IAAI,CAAC,GAAD,CAAJ;AACD;AACF,GAdD,MAcO;AACLJ,IAAAA,IAAI,GAAG,KAAP;;AACA,QAAID,SAAS,CAACU,OAAV,CAAkBP,EAAE,CAACG,IAArB,MAA+B,CAAC,CAApC,EAAuC;AACrC;AACAD,MAAAA,IAAI;AACL,KAHD,MAGO;AACL,UAAIF,EAAE,CAACG,IAAH,KAAY,QAAhB,EAA0B;AACxB;AACA;AACAD,QAAAA,IAAI,CAAC,QAAD,CAAJ;AACD,OAJD,MAIO;AACLA,QAAAA,IAAI;AACL;AACF;AACF;AACF,CA9BD;AAgCAZ,MAAM,CAACkB,SAAP,CAAiB,YAAM,CACtB,CADD;;AAGA,SAASJ,UAAT,CAAoBJ,EAApB,EAAwBE,IAAxB,EAA8B;AAC5B;AACAR,EAAAA,SAAS,CAACe,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAD,CAAT,CAA4C;AAA5C,GACGC,IADH,CACQ,UAAAC,GAAG,EAAI;AACXC,IAAAA,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,UAAnB,EAA+BH,GAAG,CAACd,IAAJ,CAASA,IAAT,CAAcR,MAA7C;AACA,QAAM0B,WAAW,GAAGrB,SAAS,CAACiB,GAAG,CAACd,IAAJ,CAASA,IAAT,CAAcR,MAAf,CAA7B,CAFW,CAEyC;AACpD;;AACA0B,IAAAA,WAAW,CAACC,IAAZ,CAAiB;AAAEd,MAAAA,IAAI,EAAE,GAAR;AAAae,MAAAA,QAAQ,EAAE,MAAvB;AAA+BC,MAAAA,MAAM,EAAE;AAAvC,KAAjB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYC,WAAZ;AACA,WAAOA,WAAP;AACD,GARH,EASGL,IATH,CASQ,UAAAK,WAAW,EAAI;AACnB1B,IAAAA,MAAM,CAAC8B,SAAP,CAAiBJ,WAAjB,EADmB,CACW;;AAC9BlB,IAAAA,IAAI,GAAG,IAAP,CAFmB,CAEP;;AACZP,IAAAA,KAAK,CAAC8B,QAAN,CAAe,eAAf,EAAgCL,WAAhC,EAHmB,CAG0B;;AAC7Cd,IAAAA,IAAI,mBAAMF,EAAN;AAAUsB,MAAAA,OAAO,EAAE;AAAnB,OAAJ,CAJmB,CAIY;AAChC,GAdH,EAeGC,KAfH,CAeS,UAAAC,CAAC,EAAI;AACV/B,IAAAA,WAAW;AACZ,GAjBH;AAkBD","sourcesContent":["import vue from 'vue'\nimport router from './router'\nimport store from './store'\nimport { getToken, removeToken } from './utils/auth'\nimport { getRouter } from './api/login'\nimport { addRouter } from './utils/addRouter'\nlet vm = new vue()\nconst whiteList = ['/login']\nvar data = false // 本次demo用变量凑合一下,项目里面应该放到vuex内\nrouter.beforeEach((to, from, next) => {\n  if (getToken()) {\n    // 判断cookice是否存在 不存在即为未登录\n    if (to.path !== '/login') {\n      if (data) {\n        // 获取了动态路由 data一定true,就无需再次请求 直接放行\n        next()\n      } else {\n        // data为false,一定没有获取动态路由,就跳转到获取动态路由的方法\n        gotoRouter(to, next)\n      }\n    } else {\n      vm.$message.info('您已经登录');\n      next('/')\n    }\n  } else {\n    data = false\n    if (whiteList.indexOf(to.path) !== -1) {\n      // 免登陆白名单 直接进入\n      next()\n    } else {\n      if (to.path !== '/login') {\n        // 重定向到登录页面 不能这么写 因为假如之前的角色是 管理员页面 后又登陆了非管理员 重定向的页面就可能不存在,就会导致404\n        // next(`/login?redirect=${to.path}`)\n        next('/login')\n      } else {\n        next()\n      }\n    }\n  }\n})\n\nrouter.afterEach(() => {\n})\n\nfunction gotoRouter(to, next) {\n  // todo 修改传参\n  getRouter(localStorage.getItem('SET_NAME')) // 获取动态路由的方法\n    .then(res => {\n      window.console.log('解析后端动态路由', res.data.data.router)\n      const asyncRouter = addRouter(res.data.data.router) // 进行递归解析\n      // 一定不能写在静态路由里面,否则会出现,访问动态路由404的情况.所以在这列添加\n      asyncRouter.push({ path: '*', redirect: '/404', hidden: true })\n      console.log(asyncRouter)\n      return asyncRouter\n    })\n    .then(asyncRouter => {\n      router.addRoutes(asyncRouter) // vue-router提供的addRouter方法进行路由拼接\n      data = true // 记录路由获取状态\n      store.dispatch('setRouterList', asyncRouter) // 存储到vuex\n      next({ ...to, replace: true }) // hack方法 确保addRoutes已完成\n    })\n    .catch(e => {\n      removeToken()\n    })\n}\n"]}]}